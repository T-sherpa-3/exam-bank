plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.0.0' // 기본 버전
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.sherpa'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// mariadb
	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.3'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.1'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// log4jdbc
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// jsp springboot 3.0이상
	implementation 'jakarta.servlet:jakarta.servlet-api'
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

	// model mapper
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.1.1'

	// StringUtils
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

	// gson
	implementation 'com.google.code.gson:gson:2.10.1'

	// aws core
	implementation("com.amazonaws:aws-java-sdk-s3:1.12.641")

	// 주석 아래로 작성 -- 권진철


	// 주석 아래로 작성 -- 김지원


	// 주석 아래로 작성 -- 이양진
	def frontDir = "$projectDir/src/main/front"

	sourceSets {
		main {
			resources { srcDirs = ["$projectDir/src/main/resources"]
			}
		}
	}

	processResources { dependsOn "copyReactBuildFiles" }

	task installReact(type: Exec) {
		workingDir "$frontDir"
		inputs.dir "$frontDir"
		group = BasePlugin.BUILD_GROUP
		if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
			commandLine "npm.cmd", "audit", "fix"
			commandLine 'npm.cmd', 'install' }
		else {
			commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
		}
	}

	task buildReact(type: Exec) {
		dependsOn "installReact"
		workingDir "$frontDir"
		inputs.dir "$frontDir"
		group = BasePlugin.BUILD_GROUP
		if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
			commandLine "npm.cmd", "run-script", "build"
		} else {
			commandLine "npm", "run-script", "build"
		}
	}

	task copyReactBuildFiles(type: Copy) {
		dependsOn "buildReact"
		from "$frontDir/build"
		into "$projectDir/src/main/resources/static"
	}


	// 주석 아래로 작성 -- 이지연


	// 주석 아래로 작성 -- 이창규


}

tasks.named('test') {
	useJUnitPlatform()
}
